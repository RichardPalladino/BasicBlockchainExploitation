from brownie import network, accounts, exceptions
import pytest

from scripts.deploy import deploy_attack_contract, deploy_bank_contract

WEI_MULTIPLIER = 10**18


def test_deposit_withdrawl(_bank, _depositor) -> bool:
    try:
        print(f"Bank has {str(_bank.balance())} balance before deposit")
        tx = _bank.deposit({"from": _depositor, "value": 1 * WEI_MULTIPLIER})
        print(f"Bank has {_bank.balance() / WEI_MULTIPLIER} balance after deposit")
        print("Depositing 1 more ETH")
        tx = _bank.deposit({"from": _depositor, "value": 1 * WEI_MULTIPLIER})
        tx.wait(1)
        print(
            f"Depositor now has {_bank.getBalance() / WEI_MULTIPLIER} ETH in the bank \nWithdrawing all ETH..."
        )
        tx = _bank.withdraw(2 * WEI_MULTIPLIER)
        tx.wait(1)
        print(
            f"Depositor now has {_bank.getBalance() / WEI_MULTIPLIER} ETH in the bank"
        )

        return True

    except Exception as err:
        print(f"Errored out: {err}")
        return False


def fund_bank(_bank, _depositor, _amnt) -> bool:
    tx = _bank.deposit({"from": _depositor, "value": _amnt})
    tx.wait(1)
    print(f"Bank now has {_bank.balance() / WEI_MULTIPLIER} balance after deposit")
    return True


def attacker_deposit(_exploit, _attacker):
    tx = _exploit.deposit({"from": _attacker, "value": 1 * WEI_MULTIPLIER})
    tx.wait(1)
    print(
        f"Bank now has {_exploit.getMyBalance() / WEI_MULTIPLIER} ETH from exploit contract"
    )


def main() -> None:
    print(f"Account[0] balance: {accounts[0].balance()}")
    ## Arrange
    bank_contract = deploy_bank_contract()
    bank_owner = accounts[0]
    attack_contract = deploy_attack_contract(bank_contract.address)
    attacker = accounts[1]

    success = test_deposit_withdrawl(bank_contract, bank_owner)

    ## Act: Initiate test cycle

    # fund the bank contract from bank_owner
    # confirm bank balance mathches the deposit
    success = fund_bank(bank_contract, bank_owner, 5 * WEI_MULTIPLIER)

    # fund the bank contract from attacker
    success = fund_bank(bank_contract, attacker, 2 * WEI_MULTIPLIER)
    print(f"Attacker deposited 2 ETH: {success}")
    # deposit into bank_contract from attack_contract, funded by attacker
    success = attacker_deposit(attack_contract, attacker)
    print(f"First exploit contract deposit success: {success}")
    success = attacker_deposit(attack_contract, attacker)
    print(f"Second exploit contract deposit success: {success}")
    print(
        f"Bank now has {bank_contract.balance() / WEI_MULTIPLIER} ETH after all deposits"
    )
    ## Assert
    # assert attacker and attack_contract balances in bank are accurate
    attacker_balance = bank_contract.getBalance({"from": attacker}) / WEI_MULTIPLIER
    print(f"Attacker balance is {attacker_balance} ETH")
    print(
        f"Attack contract balance is {attack_contract.getMyBalance() / WEI_MULTIPLIER} ETH"
    )
    # assert attacker balance and bank_owner balance add up to bank_contract balance
    owner_balance = bank_contract.getBalance({"from": bank_owner}) / WEI_MULTIPLIER
    print(f"Plus bank owner's deposit of {owner_balance} ETH should equal...")
    print(f"{bank_contract.balance() / WEI_MULTIPLIER} ETH in the bank")
    # assert attacker cannot withdraw more than they deposited
    try:
        bank_contract.withdraw(4 * WEI_MULTIPLIER, {"from": attacker})
        print("Success!  Attacker can withdraw 4 ETH!")
    except Exception as err:
        print(f'Attacker cannot withdraw 4 ETH.  Failed with "{err}" error')

    # assert attacker can withdraw less than they deposited
    try:
        bank_contract.withdraw(2 * WEI_MULTIPLIER, {"from": attacker})
        print("Success.  Attacker withdrew 2 ETH.")
    except Exception as err:
        print(f'Attacker cannot withdraw 2 ETH.  Failed with "{err}" error')

    print(f"Bank now has {bank_contract.balance() / WEI_MULTIPLIER} ETH balance")
    # assert attack_contract withdraws all funds
    print("Exploiting contract...")
    try:
        attack_contract.initiateAttack()
        print("Attack seems to have succeeded")
    except Exception as err:
        print(f'Attack failed with "{err}" error')
    # assert bank_contract has balance less than 1 ETH
    print(f"Bank now has {bank_contract.balance() / WEI_MULTIPLIER} ETH balance")
    print(f"Attack contract now has {attack_contract.balance()} ETH in balance")
