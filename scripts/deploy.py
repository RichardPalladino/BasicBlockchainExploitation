# This is only built for dev or fork environments, not test or live chains
# Template to deploy solidity contract to a blockchain
from brownie import (
    network,
    config,
    accounts,
    SimpleReentrancy,
    SimpleReentrancyAttack,
    Underflow,
    HelloWorldBank,
    BECTarget,
    BECSafe,
    SimpleVunlBlockHash,
)

LOCAL_BLOCKCHAINS = ["development", "ganache-local"]
LOCAL_BLOCKCHAIN_FORKS = ["mainnet-fork", "mainnet-fork-dev"]


def deploy_bank_contract() -> SimpleReentrancy:
    account = accounts[0]
    print(f"Deploying bank contract from {account}....")
    contract = SimpleReentrancy.deploy({"from": account})
    print("Success! Bank contract deployed at {}".format(contract.address))
    return contract


def deploy_attack_contract(_victim) -> SimpleReentrancyAttack:
    account = accounts[1]
    print(f"Deploying attack contract from {account}....")
    contract = SimpleReentrancyAttack.deploy(_victim, {"from": account})
    print("Success! Attack contract deployed at {}".format(contract.address))
    return contract


def deploy_underflow() -> Underflow:
    account = accounts[0]
    print(f"Deploying contract vulnerable to underflow attack from {account}....")
    contract = Underflow.deploy({"from": account})
    print("Success! Contract deployed at {}".format(contract.address))
    return contract


def deploy_hello_world_bank() -> HelloWorldBank:
    account = accounts[0]
    print(f"Deploying generic bank contract from {account}....")
    contract = HelloWorldBank.deploy({"from": account})
    print("Success! Contract deployed at {}".format(contract.address))
    return contract


def deploy_bec_target() -> BECTarget:
    account = accounts[0]
    print(f"Deploying contract vulnerable to batch transfer attack from {account}....")
    contract = BECTarget.deploy({"from": account})
    print("Success! Contract deployed at {}".format(contract.address))
    return contract


def deploy_bec_safe() -> BECSafe:
    account = accounts[0]
    print(f"Deploying contract safe from batch transfer attack from {account}....")
    contract = BECSafe.deploy({"from": account})
    print("Success! Contract deployed at {}".format(contract.address))
    return contract


def deploy_vuln_blockhash() -> SimpleVunlBlockHash:
    account = accounts[0]
    print(f"Deploying contract with non-random blockhash from {account}....")
    contract = SimpleVunlBlockHash.deploy({"from": account})
    print("Success! Contract deployed at {}".format(contract.address))
    return contract


def main() -> None:
    bank = deploy_bank_contract()
    attacker = deploy_attack_contract(bank.address)


if __name__ == "__main__":
    main()
