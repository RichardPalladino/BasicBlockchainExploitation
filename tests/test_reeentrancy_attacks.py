from brownie import reverts, accounts, exceptions

from scripts.deploy import deploy_attack_contract, deploy_bank_contract

WEI_MULTIPLIER = 10**18


def test_deposit_from_contract():
    ## Arrange
    bank_contract = deploy_bank_contract()
    attack_contract = deploy_attack_contract(bank_contract.address)
    attacker = accounts[1]
    ## Act
    tx = bank_contract.deposit({"from": attacker, "value": 4 * WEI_MULTIPLIER})
    tx.wait(1)
    tx = attack_contract.deposit({"from": attacker, "value": 2 * WEI_MULTIPLIER})
    tx.wait(1)
    tx = attack_contract.deposit({"from": attacker})
    tx.wait(1)
    ## Assert
    assert attack_contract.getTargetBalance() == 6 * WEI_MULTIPLIER
    assert attack_contract.getMyBalance() == 2 * WEI_MULTIPLIER


def test_attack_fail():
    ## Arrange
    bank_contract = deploy_bank_contract()
    attack_contract = deploy_attack_contract(bank_contract.address)
    attacker = accounts[1]
    ## Act
    tx = bank_contract.deposit({"from": attacker, "value": 4 * WEI_MULTIPLIER})
    tx.wait(1)
    tx = attack_contract.deposit({"from": attacker, "value": 2 * WEI_MULTIPLIER})
    tx.wait(1)
    tx = attack_contract.deposit({"from": attacker})
    tx.wait(1)
    ## Exception
    # with pytest.raises(exceptions.VirtualMachineError):
    with reverts():
        bank_contract.withdraw(5 * WEI_MULTIPLIER, {"from": attacker})


def test_attack_sucess():
    ## Arrange
    bank_contract = deploy_bank_contract()
    attack_contract = deploy_attack_contract(bank_contract.address)
    attacker = accounts[1]
    ## 1st Act
    tx = bank_contract.deposit({"from": attacker, "value": 4 * WEI_MULTIPLIER})
    tx.wait(1)
    tx = attack_contract.deposit({"from": attacker, "value": 2 * WEI_MULTIPLIER})
    tx.wait(1)
    tx = attack_contract.deposit({"from": attacker})
    tx.wait(1)
    ## Exception
    # with pytest.raises(exceptions.VirtualMachineError):
    with reverts():
        bank_contract.withdraw(5 * WEI_MULTIPLIER, {"from": attacker})
    ## 1st Assert
    assert bank_contract.balance() == attack_contract.getTargetBalance()
    assert attack_contract.getMyBalance() == 2 * WEI_MULTIPLIER
    ## 2nd Act
    tx = attack_contract.initiateAttack()
    tx.wait(1)
    ## 2nd Assert
    assert bank_contract.balance() == 0
    assert attack_contract.balance() == 6 * WEI_MULTIPLIER
