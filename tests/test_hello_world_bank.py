from brownie import reverts, accounts, exceptions

from scripts.deploy import deploy_hello_world_bank

WEI_MULTIPLIER = 10**18


def test_fund():
    # ARRANGE
    bank_contract = deploy_hello_world_bank()
    bank_owner = accounts[0]
    # ACT
    tx = bank_contract.deposit({"from": bank_owner, "value": 1 * WEI_MULTIPLIER})
    tx.wait(1)
    # ASSERT
    assert bank_contract.balance() == 1 * WEI_MULTIPLIER
    assert bank_contract.getBalance({"from": bank_owner}) == 1 * WEI_MULTIPLIER


def test_withdraw():
    # ARRANGE
    bank_contract = deploy_hello_world_bank()
    bank_owner = accounts[0]
    # ACT
    tx = bank_contract.deposit({"from": bank_owner, "value": 5 * WEI_MULTIPLIER})
    tx.wait(1)
    # ASSERT
    assert bank_contract.balance() == 5 * WEI_MULTIPLIER
    assert bank_contract.getBalance({"from": bank_owner}) == 5 * WEI_MULTIPLIER
    assert bank_contract.withdraw(5 * WEI_MULTIPLIER, {"from": bank_owner})


def test_withdraw_all():
    # Arrange
    bank_contract = deploy_hello_world_bank()
    # Act 1
    bank_contract.deposit({"from": accounts[1], "value": 1 * WEI_MULTIPLIER})
    # Assert 1
    with reverts():
        bank_contract.withdrawAll({"from": accounts[1]})
    assert bank_contract.balance() == 1 * WEI_MULTIPLIER
    # Act 2
    bank_contract.withdrawAll({"from": accounts[0]})
    # Assert 2
    assert bank_contract.balance() == 0
