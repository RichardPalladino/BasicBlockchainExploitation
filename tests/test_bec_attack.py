import pytest

from brownie import accounts, exceptions

from scripts.deploy import deploy_bec_target


def test_deposit():
    # Arrange
    bec_target = deploy_bec_target()
    # Act
    bec_target.deposit({"from": accounts[1], "value": 100})
    # Assert
    assert bec_target.getBalance({"from": accounts[1]}) == 100


def test_transfer_success():
    # Arrange
    bec_target = deploy_bec_target()
    # Act 1
    bec_target.deposit({"from": accounts[0], "value": 100})
    # Assert 1
    assert bec_target.getBalance({"from": accounts[0]}) == 100
    # Act 2
    bec_target.batchTransfer([accounts[1], accounts[2]], 50, {"from": accounts[0]})
    # Assert 2
    assert bec_target.getBalance({"from": accounts[1]}) == 50
    assert bec_target.getBalance({"from": accounts[2]}) == 50


def test_transfer_fail():
    # Arrange
    bec_target = deploy_bec_target()
    # Act
    bec_target.deposit({"from": accounts[0], "value": 100})
    # Assert
    assert bec_target.getBalance({"from": accounts[0]}) == 100
    with pytest.raises(exceptions.VirtualMachineError):
        bec_target.batchTransfer([accounts[1], accounts[2]], 60, {"from": accounts[0]})
    assert bec_target.getBalance({"from": accounts[0]}) == 100


def test_attack():
    # Arrange
    bec_target = deploy_bec_target()
    # Act 1
    bec_target.deposit({"from": accounts[0], "value": 10})
    # Assert 1
    assert bec_target.getBalance({"from": accounts[0]}) == 10
    # Act 2
    bec_target.batchTransfer(
        [accounts[1], accounts[2]],
        0x8000000000000000000000000000000000000000000000000000000000000000,
        {"from": accounts[0]},
    )
    # Assert 2
    assert (
        bec_target.getBalance({"from": accounts[1]})
        == 0x8000000000000000000000000000000000000000000000000000000000000000
    )
    assert (
        bec_target.getBalance({"from": accounts[2]})
        == 0x8000000000000000000000000000000000000000000000000000000000000000
    )
