from brownie import reverts, accounts, exceptions

from scripts.deploy import deploy_underflow


def test_deploy():
    # Arrange
    underflow_contract = deploy_underflow()
    # Act
    underflow_contract.contribute({"from": accounts[1], "value": 10})
    # Assert
    assert underflow_contract.getBalance({"from": accounts[1]}) == 10


def test_transfer_success():
    # Arrange
    underflow_contract = deploy_underflow()
    # Act 1
    underflow_contract.contribute({"from": accounts[1], "value": 18})
    # Assert 1
    assert underflow_contract.getBalance({"from": accounts[1]}) == 18
    # Act 2
    underflow_contract.transfer(accounts[0], 6, {"from": accounts[1]})
    # Assert 2
    assert underflow_contract.getBalance({"from": accounts[0]}) == 6
    assert underflow_contract.getBalance({"from": accounts[1]}) == 12


def test_transfer_fail():
    # Arrange
    underflow_contract = deploy_underflow()
    # Act
    underflow_contract.contribute({"from": accounts[1], "value": 10})
    # Assert
    with reverts():
        underflow_contract.transfer(accounts[0], 7, {"from": accounts[1]})
    assert underflow_contract.getBalance({"from": accounts[1]}) == 10


def test_attack_success():
    # Arrange
    underflow_contract = deploy_underflow()
    # Act 1
    underflow_contract.contribute({"from": accounts[1], "value": 3})
    # Assert 1
    assert underflow_contract.getBalance({"from": accounts[1]}) == 3
    # Act 2
    underflow_contract.transfer(accounts[0], 1000, {"from": accounts[1]})
    # Assert 2
    assert underflow_contract.getBalance({"from": accounts[0]}) == 1000
    assert underflow_contract.getBalance({"from": accounts[1]}) > 1000
