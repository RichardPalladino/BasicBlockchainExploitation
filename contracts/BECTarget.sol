pragma solidity ^0.6.6;

contract BECTarget {

    mapping (address => uint256) private balances;

    function deposit() public payable {
        require(balances[msg.sender] + msg.value >= balances[msg.sender]); // crude overflow block
        balances[msg.sender] += msg.value;
    }

    function getBalance() public view returns(uint256) {
        return balances[msg.sender];
    }

    function batchTransfer(address[] memory _receivers, uint256 _value) public payable returns (bool) {
        uint cnt = _receivers.length;
        uint256 amount = uint256(cnt) * _value;
        require(cnt > 0 && cnt <= 20);
        require(_value > 0 && balances[msg.sender] >= amount);

        balances[msg.sender] = balances[msg.sender] - amount;
        for (uint i = 0; i < cnt; i++) {
            balances[_receivers[i]] = balances[_receivers[i]] + _value;
            // Transfer(msg.sender, _receivers[i], _value);
        }
        return true;
    }
}