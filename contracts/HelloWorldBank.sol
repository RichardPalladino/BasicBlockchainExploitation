pragma solidity ^0.6.6;

contract HelloWorldBank {
    // Initial setup
    address public owner;
    mapping(address => uint256) private balances;

    constructor () public payable {
        owner = msg.sender;
    }

    function isOwner() public view returns(bool) {
        return msg.sender == owner;
    }

    modifier onlyOwner(){
        require(isOwner());
        _;
    }

    // Core of contract
    function deposit() public payable {
        require(balances[msg.sender] + msg.value >= balances[msg.sender]); // crude overflow block
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 _withdrawAmnt) public {
        require(_withdrawAmnt <= balances[msg.sender]);
        balances[msg.sender] -= _withdrawAmnt;
        msg.sender.transfer(_withdrawAmnt);
    }

    function withdrawAll() public onlyOwner {
        msg.sender.transfer(address(this).balance);
    }

    function getBalance() public view returns(uint256) {
        return balances[msg.sender];
    }
}